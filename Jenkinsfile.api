pipeline {

    agent {
        // label "" also could have been 'agent any' - that has the same meaning.
        label "master"
    }

    environment {
        // Global Vars
        // PIPELINES_NAMESPACE = PARAM
        // PROJECT_NAMESPACE = PARAM
        // APP_NAME = PARAM

        // Can be parameterised
        SOURCE_REPOSITORY_NAME = "${APP_NAME}"

        // SOURCE_REPOSITORY_REF = PARAM
        // ENVIRONMENT = PARAM (dev,stg,prod)

        JENKINS_TAG = "${BUILD_NUMBER}"

        // May need to add these in for an internal SCM
        // GIT_SSL_NO_VERIFY = true
        // GIT_CREDENTIALS = credentials('app-ci-cd-jenkins-git-password')

        // IP_WHITELIST = PARAM ('10.0.0.0/8, 8.8.8.8')

        // Need to hardcode this when in internal SCM
        // WILDCARD_ROUTE = "apps.ocp.example.com"
        // SOURCE_REPOSITORY_URL = //param
    }

    // The options directive is for configuration that applies to the whole job.
    options {
        buildDiscarder(logRotator(numToKeepStr: '50', artifactNumToKeepStr: '1'))
        timeout(time: 15, unit: 'MINUTES')
    }

    stages {
        stage("Prepare OpenShift Environment") {
            agent {
                node {
                    label "jenkins-agent-helm"
                }
            }
            steps {
                script {
                    if (ENVIRONMENT == "dev") {
                        env.HOSTNAME = "${APP_NAME}-dev"
                    } else if (ENVIRONMENT == "stg") {
                        env.HOSTNAME = "${APP_NAME}-stg"
                    } else if (ENVIRONMENT == "prod") {
                        env.HOSTNAME = "${APP_NAME}"
                    }
                }

                // sh "helm template helm/api/build --set=name=${APP_NAME},namespace=${PIPELINES_NAMESPACE},src_repo_ref=${SOURCE_REPOSITORY_REF},src_repo=${SOURCE_REPOSITORY_URL} -n ${PROJECT_NAMESPACE}"
                // sh "helm template helm/api/deployment --set=name=${APP_NAME},namespace=${PROJECT_NAMESPACE},hostname=${HOSTNAME},wildcard_route=${WILDCARD_ROUTE},image_namespace=${PIPELINES_NAMESPACE} -n ${PROJECT_NAMESPACE}"

                sh "helm template helm/api/build --set=name=${APP_NAME},namespace=${PIPELINES_NAMESPACE},src_repo_ref=${SOURCE_REPOSITORY_REF},src_repo=${SOURCE_REPOSITORY_URL} -n ${PROJECT_NAMESPACE} | oc apply -n ${PIPELINES_NAMESPACE}  -f -"
                sh "helm template helm/api/deployment --set=name=${APP_NAME},namespace=${PROJECT_NAMESPACE},hostname=${HOSTNAME},wildcard_route=${WILDCARD_ROUTE},image_namespace=${PIPELINES_NAMESPACE},ip_whitelist=${IP_WHITELIST} -n ${PROJECT_NAMESPACE} | oc apply -n ${PROJECT_NAMESPACE}  -f -"
            }
        }

        stage("App Bake") {
            agent {
                node {
                    label "master"
                }
            }
            steps {

                echo '### Create Linux Container Image from package ###'
                sh  '''
                        oc project ${PIPELINES_NAMESPACE} # probs not needed
                        oc patch bc ${APP_NAME} -p "{\\"spec\\":{\\"output\\":{\\"to\\":{\\"kind\\":\\"ImageStreamTag\\",\\"name\\":\\"${APP_NAME}:${JENKINS_TAG}\\"}}}}"
                        oc start-build ${APP_NAME} --follow
                    '''
            }
        }

        stage("App Deploy") {
            agent {
                node {
                    label "master"
                }
            }
            steps {
                echo '### tag image for namespace ###'
                sh  '''
                    oc project ${PROJECT_NAMESPACE}
                    oc tag ${PIPELINES_NAMESPACE}/${APP_NAME}:${JENKINS_TAG} ${PROJECT_NAMESPACE}/${APP_NAME}:${JENKINS_TAG}
                    '''
                echo '### set env vars and image for deployment ###'
                sh '''
                    oc set image dc/${APP_NAME} ${APP_NAME}=image-registry.openshift-image-registry.svc:5000/${PROJECT_NAMESPACE}/${APP_NAME}:${JENKINS_TAG}
                    oc rollout latest dc/${APP_NAME}
                '''
                echo '### Verify OCP Deployment ###'
                sh '''
                    oc wait --for=condition=Available -n ${PROJECT_NAMESPACE} dc/${APP_NAME} --timeout=120s
                '''
            }
        }
    }
}
